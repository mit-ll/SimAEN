function [txt, fe] = tell(eventsOut, ind)
% DISTRIBUTION STATEMENT A. Approved for public release. Distribution is unlimited.

% This material is based upon work supported under Air Force Contract No. FA8702-15-D-0001.
% Any opinions,findings, conclusions or recommendations expressed in this material are those
% of the author(s) and do not necessarily reflect the views of the Centers for Disease Control.

% (c) 2020 Massachusetts Institute of Technology.

% The software/firmware is provided to you on an As-Is basis

% Delivered to the U.S. Government with Unlimited Rights, as defined in DFARS Part 252.227-7013
% or 7014 (Feb 2014). Notwithstanding any copyright notice, U.S. Government rights in this work
% are defined by DFARS 252.227-7013 or DFARS 252.227-7014 as detailed above. Use of this work
% other than as specifically authorized by the U.S. Government may violate any copyrights that
% exist in this work.

% Copyright (c) 2020 Massachusetts Institute of Technology
% SPDX short identifier: MIT

%Developed as part of: SimAEN, 2020
%Authors: DI25756, JO26228, ED22162
% function [txt, fe] = tell(eventsOut, ind)

% Get events
events = eventsOut.events;

% Filter processed events down to specified individual
fe = filter_events(events, ind); %fe: filtered events

% Get generation events where this individual is generator
generators = exf(events.generation, 'generator', 'UniformOutput', false);
for i = 1:numel(generators)
    if isempty(generators{i})
        generators{i} = nan;
    end
end
generators = cell2mat(generators);
gen_events = events.generation(generators == ind);

txt = "";
txt = txt.append(sprintf('\nThe story of Agent %d\n----------------------\n', ind));

% Generation
if isempty(fe.generation.generator)
    txt = txt.append(sprintf("Present at the start of simulation in %s state.\n", upper(fe.generation.infectionStatus)));
    
    % Has app
    if fe.generation.hasApp
        msg = "an APP USER";
    else
        msg = "NOT an app user";
    end
    txt = txt.append(sprintf("\t\t+ Agent %d is %s.\n", ind, msg));
else
    txt = txt.append(sprintf("Day %d: generated by close contact with Agent %d.\n", fe.generation.day, fe.generation.generator));
    
    % Infection status
    switch fe.generation.infectionStatus
        case 'Exposed'
            msg = "";                        
        case 'Uninfected'
            msg = "NOT ";
        otherwise
            warning('Invalid starting infection status %s for Agent %d', fe.generation.infectionStatus, ind);
            msg = "[WARNING]";
    end
    txt = txt.append(sprintf("\t\t+ Agent %d was %sinfected and entered the simulation in the %s state.\n", ind, msg, upper(fe.generation.infectionStatus)));
    
    % Has app
    if fe.generation.hasApp
        msg = "";
    else
        msg = "NOT ";
    end
    txt = txt.append(sprintf("\t\t+ Agent %d is %san app user.\n", ind, msg));
    
    % Generator has app
    if fe.generation.generatorHasApp
        msg = "";
    else
        msg = "NOT ";
    end
    txt = txt.append(sprintf("\t\t+ Agent %d (generator) is %san app user.\n", fe.generation.generator, msg));
    
    % Detected generator
    if fe.generation.hasApp && fe.generation.generatorHasApp
        if fe.generation.appDetectsGenerator
            msg = "detected";
        else
            msg = "did NOT detect";
        end        
        txt = txt.append(sprintf("\t\t+ Agent %d's app %s the generator's app.\n", ind, msg));
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%% Start Order %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Define event types that need to be put in day order
ordered_event_types = ...
    ["infectionStatusChange", ...
     "tookTest", ...
     "receivedTestResult", ...
     "behaviorChange", ...
     "aen", ...
     "keyUpload", ...
     "publicHealthCall", ...
     "addedToCallList", ...
     "identifiedContact"];
 
% Handle when this agent is subject of manual contact tracing
mct_contact = exf(events.identifiedContact, "contact");
mct_idx = mct_contact == ind;

% Get number of events that we need to keep in order
NE = 0;
for i = 1:numel(ordered_event_types)
    NE = NE + numel(fe.(ordered_event_types(i)));
end
NE = NE + nnz(mct_idx);
    
% Preallocate, start counter
%
% Column 1: event number
% Column 2: text
C = cell(NE, 2);
q = 0;

% Infection status changes
for i = 1:numel(fe.infectionStatusChange)
    q = q + 1;
    ev = fe.infectionStatusChange(i);
    C{q, 1} = ev.eventNum;
    C{q, 2} = sprintf("Day %d: transitioned to the %s state.\n", ev.day, upper(ev.infectionStatus));
end

% Took test
for i = 1:numel(fe.tookTest)
    q = q + 1;
    ev = fe.tookTest(i);
    C{q, 1} = ev.eventNum;
    C{q, 2} = sprintf("Day %d: underwent test for disease.  Infection status was %s.\n", ev.day, upper(ev.infectionStatus));
end

% Received test result
for i = 1:numel(fe.receivedTestResult)
    q = q + 1;
    ev = fe.receivedTestResult(i);
    C{q, 1} = ev.eventNum;
    
    if ev.testResultPositive == true
        msg = 'POSITIVE';
    else
        msg = 'NEGATIVE';
    end
    
    C{q, 2} = sprintf("Day %d: received test result of %s.  Infection status at time of test was %s.\n", ev.day, msg, upper(ev.testdayInfectionStatus));
end

% Added to Call List
for i = 1:numel(fe.addedToCallList)
    q = q + 1;
    ev = fe.addedToCallList(i);
    C{q, 1} = ev.eventNum;
    
    switch ev.basis
        case 'aen_response'
            msg = 'AEN RESPONSE';
        case 'positive_test_response'
            msg = 'POSITIVE TEST RESPONSE';
        case 'manual_contact_tracing'
            msg = 'MANUAL CONTACT TRACING';
        otherwise
            warning('Invalid call list addition basis Agent %d', ind);
            msg = '[WARNING]';
    end
    
    C{q, 2} = sprintf("Day %d: added to call list on basis %s.\n", ev.day, msg);
end

% Public Health Calls
for i = 1:numel(fe.publicHealthCall)
    q = q + 1;
    ev = fe.publicHealthCall(i);
    C{q, 1} = ev.eventNum;
    
    % Define msg1 and msg2
    if ev.success; msg1 = ""; else; msg1 = "UN"; end
    switch ev.callType
        case 'index_case'
            msg2 = 'n INDEX CASE';
        case 'contact_case'
            msg2 = ' CONTACT CASE';
        otherwise
            warning('Invalid call type for Agent %d', ind);
            msg2 = '[WARNING]';
    end
    
    C{q, 2} = sprintf('Day %d: public health made %sSUCCESSFUL call on attempt %d.  Agent considered a%s.\n', ...
        ev.day, msg1, ev.callNumber, msg2);
end

% Identified Contact
for i = 1:numel(fe.identifiedContact)
    q = q + 1;
    ev = fe.identifiedContact(i);
    C{q, 1} = ev.eventNum;    
    C{q, 2} = sprintf('Day %d: identified Agent %d through manual contact tracing.\n', ev.day, ev.contact);
end

% Identified by Contact
if ~isempty(mct_idx)
    fic = events.identifiedContact(mct_idx); %fic: filtered identified contact
    for i = 1:numel(fic)
        q = q + 1;
        ev = fic(i);
        C{q, 1} = ev.eventNum;
        C{q, 2} = sprintf('Day %d: identified BY Agent %d through manual contact tracing.\n', ev.day, ev.individual);
    end
end

% Behavior changes
for i = 1:numel(fe.behaviorChange)
    q = q + 1;
    ev = fe.behaviorChange(i);
    C{q, 1} = ev.eventNum;
    C{q, 2} = sprintf("Day %d: changed behavior to %s.\n", ev.day, upper(strrep(ev.behavior, '_', ' ')));
end

% Automated exposure notifications
for i = 1:numel(fe.aen)
    q = q + 1;
    ev = fe.aen(i);
    C{q, 1} = ev.eventNum;
    C{q, 2} = sprintf("Day %d: received AEN.\n", ev.day);
end

% Uploaded keys
for i = 1:numel(fe.keyUpload)
    q = q + 1;
    ev = fe.keyUpload(i);
    C{q, 1} = ev.eventNum;
    C{q, 2} = sprintf("Day %d: uploaded Bluetooth keys.\n", ev.day);
end

% Generation events where this indidivual is generator
for i = 1:numel(gen_events)
    q = q + 1;
    ev = gen_events(i);
    C{q, 1} = ev.eventNum;
    
    msg = "";
    
    if ev.hasApp; app_msg = 'APP USER'; else; app_msg = 'NON-APP USER'; end    
    if ev.falseDiscovery; fd_msg = 'FALSE CLOSE CONTACT'; else; fd_msg = 'TRUE CLOSE CONTACT'; end    
    msg = msg.append(sprintf("Day %d: close contact with %s, %s Agent %d.\n", ev.day, app_msg, fd_msg, ev.individual));
    
    if strcmpi(ev.infectionStatus, 'uninfected'); inf_msg = "NOT "; else; inf_msg = ""; end
    msg = msg.append(sprintf("\t\t+ Agent %d was %sinfected.\n", ev.individual, inf_msg));
    
    if ev.hasApp && fe.generation.hasApp % only mention detection if both agents are app users
        if ev.appDetectsGenerator; adg_msg = "DETECTED"; else; adg_msg = "DID NOT DETECT"; end
        msg = msg.append(sprintf("\t\t+ Agent %d's app %s Agent %d's app.\n", ev.individual, adg_msg, ev.generator));

        if ev.appDetectsGenerator; adcc_msg = "DETECTED"; else; adcc_msg = "DID NOT DETECT"; end
        msg = msg.append(sprintf("\t\t+ Agent %d's app %s Agent %d's app.\n", ev.generator, adcc_msg, ev.individual));
    end
    
    C{q, 2} = msg;
end

% Sort new messages by eventNum
eventNums = cell2mat(C(:, 1));
[~, I] = sort(eventNums);
sorted_events = C(I, 2);

% Append to growing text
for i = 1:numel(sorted_events)
    txt = txt.append(string(sorted_events(i)));
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%% End Order %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Removal
if isempty(fe.removal)
    txt = txt + sprintf("Present at the end of the simulation.\n");
else
    txt = txt + sprintf("Day %d: removed from the simulation.\n", fe.removal.day);
end

% Print to command window
fprintf('%s\n', txt);
end
